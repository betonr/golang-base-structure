package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"

	"github.com/betonr/golang-base-structure/graph/model"
)

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input model.CreateArticleInput) (*model.Article, error) {
	article, err := r.ArticleService.CreateArticle(ctx, input.Title, input.Content, "")
	if err != nil {
		return nil, err
	}
	// Map *domain.Article to *model.Article
	return &model.Article{
		ID:      article.ID,
		Title:   article.Title,
		Content: article.Content,
	}, nil
}

// UpdateArticle is the resolver for the updateArticle field.
func (r *mutationResolver) UpdateArticle(ctx context.Context, id string, input model.UpdateArticleInput) (bool, error) {
	err := r.ArticleService.UpdateArticle(ctx, id, *input.Title, *input.Content)
	if err != nil {
		return false, err
	}
	return true, nil
}

// DeleteArticle is the resolver for the deleteArticle field.
func (r *mutationResolver) DeleteArticle(ctx context.Context, id string) (bool, error) {
	err := r.ArticleService.DeleteArticle(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Article, error) {
	articles, err := r.ArticleService.ListArticles(ctx)
	if err != nil {
		return nil, err
	}

	// Map []*domain.Article to []*model.Article
	var modelArticles []*model.Article
	for _, article := range articles {
		modelArticles = append(modelArticles, &model.Article{
			ID:      article.ID,
			Title:   article.Title,
			Content: article.Content,
		})
	}
	return modelArticles, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Article, error) {
	article, err := r.ArticleService.GetArticleByID(ctx, id)
	if err != nil {
		return nil, err
	}
	// Map *domain.Article to *model.Article
	return &model.Article{
		ID:      article.ID,
		Title:   article.Title,
		Content: article.Content,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
